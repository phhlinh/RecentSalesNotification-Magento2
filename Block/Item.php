<?php
/**
 * PL Development.
 *
 * @category    PL
 * @author      Linh Pham <plinh5@gmail.com>
 * @copyright   Copyright (c) 2016 PL Development. (http://www.polacin.com)
 */
namespace PL\Salenotice\Block;

use Magento\Framework\Stdlib\DateTime;
use Magento\Sales\Model\ResourceModel\Order\CollectionFactory;
use Magento\Framework\App\ResourceConnection;

class Item extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    protected $_storeManager;

    /**
     * @var DateTime\DateTime
     */
    protected $_date;

    /**
     * @var \PL\Salenotice\Model\ItemFactory
     */
    protected $_salenoticeFactory;

    /**
     * @var \PL\Salenotice\Helper\Data
     */
    protected $_salenoticeHelper;

    /**
     * @var \Magento\Catalog\Model\ProductFactory
     */
    protected $_productFactory;

    /**
     * @var \Magento\Catalog\Helper\Image
     */
    protected $_imageHelper;

    /**
     * @var \Magento\Sales\Model\OrderFactory
     */
    protected $_orderFactory;

    /**
     * @var \Magento\Sales\Model\Order\ItemFactory
     */
    protected $_orderItemFactory;

    /**
     * @var \Magento\Framework\Locale\ListsInterface
     */
    protected $_locale;

    /**
     * @var ResourceConnection
     */
	protected $_resourceConnection;

    /**
     * @param \Magento\Framework\View\Element\Template\Context $context
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param DateTime\DateTime $date
     * @param \PL\Salenotice\Model\ItemFactory $salenoticeFactory
     * @param \PL\Salenotice\Helper\Data $salenoticeHelper
     * @param \Magento\Catalog\Model\ProductFactory $productFactory
     * @param \Magento\Catalog\Helper\Image $imageHelper
     * @param \Magento\Sales\Model\OrderFactory $orderFactory
     * @param \Magento\Sales\Model\Order\ItemFactory $orderItemFactory
     * @param \Magento\Framework\Locale\ListsInterface $locale
     * @param ResourceConnection $resourceConnection
     * @param array $data
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Framework\Stdlib\DateTime\DateTime $date,
        \PL\Salenotice\Model\ItemFactory $salenoticeFactory,
        \PL\Salenotice\Helper\Data $salenoticeHelper,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Magento\Catalog\Helper\Image $imageHelper,
        \Magento\Sales\Model\OrderFactory $orderFactory,
        \Magento\Sales\Model\Order\ItemFactory $orderItemFactory,
        \Magento\Framework\Locale\ListsInterface $locale,
		ResourceConnection $resourceConnection,
        array $data = []
    ) {
        parent::__construct($context, $data);
        $this->_storeManager = $storeManager;
        $this->_date   = $date;
        $this->_salenoticeFactory = $salenoticeFactory;
        $this->_salenoticeHelper = $salenoticeHelper;
        $this->_productFactory = $productFactory;
        $this->_imageHelper = $imageHelper;
        $this->_orderFactory = $orderFactory;
        $this->_orderItemFactory = $orderItemFactory;
        $this->_locale = $locale;
		$this->_resourceConnection = $resourceConnection;
    }

    protected function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection
     */
    public function getLastOrderCollection()
    {
        if (!$this->_salenoticeHelper->getConfig('salenotice/base_settings/active')) {
            return;
        }
        $orderStatuses = ltrim($this->_salenoticeHelper->getConfig('salenotice/base_settings/order_status'),',');
        $statusArray = array_filter(explode(",",$orderStatuses));
        $orderCollection = $this->_orderFactory->create()->getCollection();
        $orderCollection->getSelect()->join(
            ['order_address'=>$this->_resourceConnection->getTableName('sales_order_address')],
            'main_table.entity_id = order_address.parent_id',
            [
                'order_address.street',
                'order_address.postcode',
                'order_address.region',
                'order_address.city',
                'order_address.country_id'
            ]
        )
            ->join(
                ['order_item'=>$this->_resourceConnection->getTableName('sales_order_item')],
                'main_table.entity_id = order_item.order_id',
                ['order_item.product_id']
            );
        if (count($statusArray)>0) {
            $orderCollection->getSelect()->where('main_table.status in (?)',$statusArray);
        }
        $orderCollection->getSelect()
            ->where('order_address.address_type=?', 'billing')
            ->group('main_table.entity_id')
            ->order('main_table.entity_id', 'desc')
            ->limit($this->_salenoticeHelper->getOrderLimit());
        $orderCollection->addFieldToFilter('main_table.store_id', $this->_storeManager->getStore()->getId());
        //print'<pre>'; print_r( $orderCollection->getSelect()->__toString()); exit;
        return $orderCollection;
    }

    /**
     * @return array
     */
    public function getSalenoticeCollection()
    {
        if (!$this->_salenoticeHelper->getConfig('salenotice/base_settings/active')) {
            return;
        }
        if ($this->_salenoticeHelper->isMobile()) {
            if (!$this->_salenoticeHelper->getConfig('salenotice/base_settings/mobile')) {
                return;
            }
        }

        $module = $this->_request->getModuleName();
        $controller = $this->_request->getControllerName();
        $action = $this->_request->getActionName();
        $allowedPages = explode(',',$this->_salenoticeHelper->getConfig('salenotice/base_settings/display_on'));

        if (count($allowedPages)==0) {
            return;
        }

        if ($module =='cms') {
            if ($controller=='index' && $action=='index') {
                if (!in_array(1,$allowedPages)) {
                    return;
                }
            }
            if ($controller=='page' && $action=='view') {
                if (!in_array(2,$allowedPages)) {
                    return;
                }
            }
        }
        if ($module=='catalog') {
            if ($controller=='product') {
                if (!in_array(3,$allowedPages)) {
                    return;
                }
            }

            if ($controller=='category') {
                if (!in_array(4,$allowedPages)) {
                    return;
                }
            }
        }

        $data = [];

        // using real order - get last orders
        if ($this->_salenoticeHelper->getConfig('salenotice/base_settings/data')==1) {
            $i=0;
            foreach ($this->getLastOrderCollection() as $order) {
                $product = $this->_productFactory->create()->load($order->getProductId());
                $imageUrl = $this->_imageHelper->init($product, 'product_base_image')->resize(60)->getUrl();
                $shipping_address = $order->getCity().', ';
                $shipping_address.= $this->_locale->getCountryTranslation($order->getCountryId());
                $order_date = $this->getTimeAgo($order->getCreatedAt());
                $data[$i] = $this->getNoticeHtml(array(
                    'product_image_url'=>$imageUrl,
                    'product_url'   =>$product->getProductUrl(),
                    'product_name'  =>$product->getName(),
                    'shipping_address'  =>$shipping_address,
                    'time_ago'          =>$order_date
                ));
                $i++;
            }
        } else {
            // using dummy data
            $collection = $this->_salenoticeFactory->create()->getCollection()
                ->setOrder('item_id', 'DESC');
            $i=0;
            foreach ($collection as $item) {
                $product_id = $item->getProductId();
                $product = $this->_productFactory->create()->load($product_id);
                $imageUrl = $this->_imageHelper->init($product, 'product_base_image')->resize(60)->getUrl();
                $data[$i]= $this->getNoticeHtml([
                    'product_image_url'=>$imageUrl,
                    'product_url'   =>$product->getProductUrl(),
                    'product_name'  =>$product->getName(),
                    'shipping_address'  =>$item->getShippingAddress(),
                    'time_ago'          =>$item->getTimeAgo()
                ]);
                $i++;
            }
        }

        return $data;
    }

    /**
     * @param array $data
     * @return string
     */
    public function getNoticeHtml($data = [])
    {
        if (!$this->_salenoticeHelper->getConfig('salenotice/base_settings/active')) {
            return;
        }

        $html='<div class="salenotice"><div class="notice-img">';
        $html.='<img src="'.$data['product_image_url'].'" width="60"/>';
        $html.='</div><div class="notice-text">'.__('Someone in %1 bought', $data['shipping_address']);
        $html.=' <a class="notice-product-link" href="'.$data['product_url'].'">'.$data['product_name'].'</a>';
        $html.='<div class="time-ago">'.$data['time_ago'].'</div></div></div>';
        return $html;
    }

    /**
     * @param $dattime
     * @return string
     */
    public function getTimeAgo($dattime)
    {
        $current_time = $this->_date->gmtTimestamp();
        $time =strtotime($dattime);
        $different_time = round(($current_time-$time)/60);
        $output_min='';
        $output_hour='';
        $output_day='';
        $output_sec='';
        $hour = round($different_time/60);
        $hour_mod = ($different_time % 60);
        $min = ($different_time % 60);
        $min_mod = $different_time % 60;
        $day = round($different_time/(60*24));
        $day_mod = $different_time % (60*24);
        $second = $current_time-$time;
        if ($day > 1) {
            $output_day= $day.' '.__('days').' ';
        }
        if ($day == 1) {
            $output_day=__('a day').' ';
        }
        if ($day < 1) {
            if ($hour > 1) {
                $output_hour= $hour.' '.__('hours').' ';
            }
            if ($hour == 1) {
                $output_hour= __('an hour').' ';
                if ($hour_mod > 1) {
                    $output_min=$hour_mod.' '.__('minutes').' ';
                }
            }
            if ($hour == 0) {
                if ($min > 10) {
                    $output_min = $min.' '.__('minutes').' ';
                }
                if ($min > 1 && $min < 10) {
                    $output_min = __('a few minutes').' ';
                }
                if ($min==1) {
                    $output_min = __('a minute').' ';
                }
                if ($min==0) {
                    $output_sec = ' '.__('a few seconds').' ';
                }
            }
        }
        $output=$output_day.$output_hour.$output_min.$output_sec.__('ago');
        return $output;
    }

    protected function allowPage()
    {

    }
}
